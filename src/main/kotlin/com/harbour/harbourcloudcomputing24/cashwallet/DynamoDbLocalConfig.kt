package com.harbour.harbourcloudcomputing24.cashwallet

import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedAsyncClient
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension
import software.amazon.awssdk.enhanced.dynamodb.extensions.VersionedRecordExtension
import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient
import java.net.URI
import java.time.Clock

@Configuration
class DynamoDbLocalConfig {
    @Bean
    fun dynamoDbClientNew(
        @Value("\${aws.region}") region: String?,
        @Qualifier(DYNAMODB_ENDPOINT) endpointConfiguration: EndpointConfiguration
    ): DynamoDbAsyncClient {
        val accessName = endpointConfiguration.getAccessName().orElse(null)
        val secretKey = endpointConfiguration.getKey().orElse(null)
        return DynamoDbAsyncClient.builder()
            .endpointOverride(URI.create(endpointConfiguration.endpointWithProtocol))
            .region(Region.of(region))
            .httpClientBuilder(NettyNioAsyncHttpClient.builder())
            .credentialsProvider(
                StaticCredentialsProvider.create(AwsBasicCredentials.create(accessName, secretKey))
            )
            .build()
    }

    @Bean
    fun dbClient(dynamoDbClient: DynamoDbAsyncClient?, clock: Clock?): DynamoDbEnhancedAsyncClient {
        val autoGeneratedTimestampExtension =
            AutoGeneratedTimestampRecordExtension.builder().baseClock(clock).build()
        return DynamoDbEnhancedAsyncClient.builder()
            .extensions(autoGeneratedTimestampExtension, VersionedRecordExtension.builder().build())
            .dynamoDbClient(dynamoDbClient)
            .build()
    }

    @Bean(name = [DYNAMODB_ENDPOINT])
    fun dynamodbEndpointConfiguration(
        @Value("\${dynamodb.host}") host: String?,
        @Value("\${dynamodb.port}") port: Int,
        @Value("\${aws.awsAccessKeyId}") accessKey: String?,
        @Value("\${aws.awsSecretAccessKey}") secretKey: String?
    ): EndpointConfiguration {
        return EndpointConfiguration.authenticated(host, port, accessKey, secretKey)
    }

    companion object {
        const val DYNAMODB_ENDPOINT: String = "dynamodbEndpoint"
    }
}